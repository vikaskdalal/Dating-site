// <auto-generated />
using System;
using DotNetCoreAngular.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DotNetCoreAngular.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220728150603_AddedGroupAndConnectionEntity")]
    partial class AddedGroupAndConnectionEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.Connection", b =>
                {
                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConnectionId");

                    b.HasIndex("GroupName");

                    b.ToTable("Connections", "SignalR");
                });

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.Group", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.HasKey("Name");

                    b.ToTable("Groups", "SignalR");
                });

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateRead")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MessageSent")
                        .HasColumnType("datetime2");

                    b.Property<bool>("RecipientDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RecipientId")
                        .HasColumnType("int");

                    b.Property<string>("RecipientUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SenderDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<string>("SenderUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages", "Message");
                });

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Photos", "User");
                });

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("Gender")
                        .HasColumnType("smallint");

                    b.Property<string>("Interests")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Introduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("datetime2");

                    b.Property<string>("LookingFor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", "User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 7, 28, 20, 36, 3, 171, DateTimeKind.Local).AddTicks(1651),
                            DateOfBirth = new DateTime(2022, 7, 28, 20, 36, 3, 171, DateTimeKind.Local).AddTicks(1698),
                            Email = "vikaskdalal@gmail.com",
                            LastActive = new DateTime(2022, 7, 28, 20, 36, 3, 171, DateTimeKind.Local).AddTicks(1644),
                            Name = "Vikas",
                            PasswordHash = new byte[] { 121, 170, 98, 42, 9, 228, 35, 53, 148, 75, 114, 147, 177, 10, 106, 36, 210, 184, 184, 145, 115, 164, 196, 181, 224, 238, 178, 147, 153, 236, 28, 31, 193, 30, 247, 138, 124, 213, 43, 182, 121, 187, 2, 244, 144, 252, 167, 76, 104, 214, 58, 164, 226, 95, 216, 186, 171, 178, 253, 122, 52, 39, 219, 53 },
                            PasswordSalt = new byte[] { 232, 133, 41, 131, 99, 122, 138, 228, 155, 233, 224, 45, 163, 11, 43, 153, 192, 62, 6, 59, 213, 222, 84, 240, 83, 245, 160, 109, 238, 161, 229, 134, 182, 35, 165, 145, 216, 189, 133, 209, 77, 208, 106, 249, 69, 161, 116, 193, 124, 232, 125, 147, 21, 199, 229, 114, 145, 204, 21, 56, 254, 221, 197, 196, 181, 223, 28, 202, 98, 4, 111, 192, 188, 8, 247, 146, 191, 172, 124, 66, 126, 65, 98, 114, 180, 151, 170, 80, 68, 9, 116, 166, 219, 45, 88, 101, 212, 135, 255, 3, 0, 31, 247, 25, 159, 72, 39, 188, 1, 216, 120, 82, 58, 141, 18, 118, 250, 160, 245, 194, 174, 39, 54, 150, 93, 188, 32, 216 },
                            Username = "m+dhmpjucooq5clmqiqsfg=="
                        });
                });

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.UserLike", b =>
                {
                    b.Property<int>("SourceUserId")
                        .HasColumnType("int");

                    b.Property<int>("LikedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.HasKey("SourceUserId", "LikedUserId");

                    b.HasIndex("LikedUserId");

                    b.ToTable("UserLikes", "User");
                });

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.Connection", b =>
                {
                    b.HasOne("DotNetCoreAngular.Models.Entity.Group", null)
                        .WithMany("Connections")
                        .HasForeignKey("GroupName");
                });

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.Message", b =>
                {
                    b.HasOne("DotNetCoreAngular.Models.Entity.User", "Recipient")
                        .WithMany("MessagesReceived")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DotNetCoreAngular.Models.Entity.User", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.Photo", b =>
                {
                    b.HasOne("DotNetCoreAngular.Models.Entity.User", "User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.UserLike", b =>
                {
                    b.HasOne("DotNetCoreAngular.Models.Entity.User", "LikedUser")
                        .WithMany("LikedByUsers")
                        .HasForeignKey("LikedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DotNetCoreAngular.Models.Entity.User", "SourceUser")
                        .WithMany("LikedUsers")
                        .HasForeignKey("SourceUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LikedUser");

                    b.Navigation("SourceUser");
                });

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.Group", b =>
                {
                    b.Navigation("Connections");
                });

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.User", b =>
                {
                    b.Navigation("LikedByUsers");

                    b.Navigation("LikedUsers");

                    b.Navigation("MessagesReceived");

                    b.Navigation("MessagesSent");

                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
