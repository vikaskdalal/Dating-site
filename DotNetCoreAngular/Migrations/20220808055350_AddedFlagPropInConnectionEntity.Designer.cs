// <auto-generated />
using System;
using DotNetCoreAngular.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DotNetCoreAngular.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220808055350_AddedFlagPropInConnectionEntity")]
    partial class AddedFlagPropInConnectionEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.Connection", b =>
                {
                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Flag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConnectionId");

                    b.HasIndex("GroupName");

                    b.ToTable("Connections", "SignalR");
                });

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.Group", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.HasKey("Name");

                    b.ToTable("Groups", "SignalR");
                });

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateRead")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MessageSent")
                        .HasColumnType("datetime2");

                    b.Property<bool>("RecipientDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RecipientId")
                        .HasColumnType("int");

                    b.Property<bool>("SenderDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages", "Message");
                });

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Photos", "User");
                });

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("Gender")
                        .HasColumnType("smallint");

                    b.Property<string>("Interests")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Introduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("datetime2");

                    b.Property<string>("LookingFor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", "User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 8, 8, 11, 23, 50, 365, DateTimeKind.Local).AddTicks(488),
                            DateOfBirth = new DateTime(2022, 8, 8, 11, 23, 50, 365, DateTimeKind.Local).AddTicks(542),
                            Email = "vikaskdalal@gmail.com",
                            LastActive = new DateTime(2022, 8, 8, 11, 23, 50, 365, DateTimeKind.Local).AddTicks(481),
                            Name = "Vikas",
                            PasswordHash = new byte[] { 63, 198, 172, 68, 52, 28, 110, 166, 242, 74, 27, 90, 197, 25, 38, 228, 189, 96, 91, 133, 181, 78, 205, 109, 191, 154, 132, 3, 105, 12, 50, 120, 58, 126, 200, 208, 155, 91, 86, 55, 193, 126, 207, 55, 230, 65, 38, 2, 99, 47, 226, 175, 90, 168, 190, 231, 101, 17, 59, 186, 84, 169, 5, 221 },
                            PasswordSalt = new byte[] { 181, 156, 91, 95, 109, 88, 107, 124, 23, 27, 133, 73, 33, 54, 226, 62, 9, 200, 30, 200, 143, 128, 145, 157, 198, 72, 248, 20, 146, 59, 156, 242, 112, 168, 228, 118, 126, 77, 63, 182, 70, 136, 221, 253, 11, 147, 60, 236, 239, 215, 189, 99, 52, 186, 194, 2, 144, 169, 15, 151, 116, 5, 82, 57, 111, 185, 241, 75, 50, 159, 114, 118, 166, 170, 227, 26, 6, 146, 173, 178, 67, 173, 129, 200, 91, 47, 4, 20, 9, 52, 38, 177, 184, 172, 144, 101, 85, 16, 5, 193, 177, 100, 99, 182, 102, 180, 239, 40, 140, 83, 86, 26, 190, 83, 20, 94, 99, 66, 161, 143, 52, 254, 174, 128, 8, 239, 246, 248 },
                            Username = "mdhmpjucooq5clmqiqsfg"
                        });
                });

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.UserLike", b =>
                {
                    b.Property<int>("SourceUserId")
                        .HasColumnType("int");

                    b.Property<int>("LikedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.HasKey("SourceUserId", "LikedUserId");

                    b.HasIndex("LikedUserId");

                    b.ToTable("UserLikes", "User");
                });

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.Connection", b =>
                {
                    b.HasOne("DotNetCoreAngular.Models.Entity.Group", null)
                        .WithMany("Connections")
                        .HasForeignKey("GroupName");
                });

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.Message", b =>
                {
                    b.HasOne("DotNetCoreAngular.Models.Entity.User", "Recipient")
                        .WithMany("MessagesReceived")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DotNetCoreAngular.Models.Entity.User", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.Photo", b =>
                {
                    b.HasOne("DotNetCoreAngular.Models.Entity.User", "User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.UserLike", b =>
                {
                    b.HasOne("DotNetCoreAngular.Models.Entity.User", "LikedUser")
                        .WithMany("LikedByUsers")
                        .HasForeignKey("LikedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DotNetCoreAngular.Models.Entity.User", "SourceUser")
                        .WithMany("LikedUsers")
                        .HasForeignKey("SourceUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LikedUser");

                    b.Navigation("SourceUser");
                });

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.Group", b =>
                {
                    b.Navigation("Connections");
                });

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.User", b =>
                {
                    b.Navigation("LikedByUsers");

                    b.Navigation("LikedUsers");

                    b.Navigation("MessagesReceived");

                    b.Navigation("MessagesSent");

                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
