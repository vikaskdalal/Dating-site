// <auto-generated />
using System;
using DotNetCoreAngular.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DotNetCoreAngular.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220808124107_RemovedFlagPropInConnectionEntity")]
    partial class RemovedFlagPropInConnectionEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.Connection", b =>
                {
                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConnectionId");

                    b.HasIndex("GroupName");

                    b.ToTable("Connections", "SignalR");
                });

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.Group", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.HasKey("Name");

                    b.ToTable("Groups", "SignalR");
                });

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateRead")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MessageSent")
                        .HasColumnType("datetime2");

                    b.Property<bool>("RecipientDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RecipientId")
                        .HasColumnType("int");

                    b.Property<bool>("SenderDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages", "Message");
                });

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Photos", "User");
                });

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("Gender")
                        .HasColumnType("smallint");

                    b.Property<string>("Interests")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Introduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("datetime2");

                    b.Property<string>("LookingFor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", "User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 8, 8, 18, 11, 6, 833, DateTimeKind.Local).AddTicks(1627),
                            DateOfBirth = new DateTime(2022, 8, 8, 18, 11, 6, 833, DateTimeKind.Local).AddTicks(1674),
                            Email = "vikaskdalal@gmail.com",
                            LastActive = new DateTime(2022, 8, 8, 18, 11, 6, 833, DateTimeKind.Local).AddTicks(1620),
                            Name = "Vikas",
                            PasswordHash = new byte[] { 193, 53, 92, 94, 201, 151, 157, 111, 132, 115, 37, 107, 59, 51, 95, 54, 146, 152, 201, 103, 184, 222, 93, 82, 67, 75, 5, 101, 9, 26, 192, 4, 168, 241, 90, 101, 91, 115, 236, 234, 37, 110, 153, 153, 192, 163, 89, 72, 1, 135, 241, 37, 197, 101, 173, 168, 147, 199, 157, 148, 31, 139, 31, 174 },
                            PasswordSalt = new byte[] { 19, 5, 150, 112, 126, 214, 195, 215, 207, 45, 207, 182, 158, 17, 113, 139, 179, 10, 74, 134, 146, 227, 84, 207, 187, 212, 254, 138, 166, 135, 169, 199, 101, 74, 236, 53, 49, 247, 106, 220, 34, 45, 7, 48, 180, 147, 116, 250, 243, 62, 70, 167, 240, 155, 18, 210, 17, 122, 161, 135, 59, 5, 221, 32, 77, 131, 178, 112, 128, 170, 128, 25, 176, 140, 141, 128, 153, 2, 143, 210, 51, 93, 237, 172, 99, 41, 171, 43, 80, 183, 73, 152, 185, 137, 89, 73, 192, 160, 134, 11, 83, 133, 52, 43, 186, 147, 51, 130, 15, 252, 14, 189, 15, 210, 247, 6, 36, 173, 127, 8, 66, 157, 239, 8, 223, 45, 29, 90 },
                            Username = "mdhmpjucooq5clmqiqsfg"
                        });
                });

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.UserLike", b =>
                {
                    b.Property<int>("SourceUserId")
                        .HasColumnType("int");

                    b.Property<int>("LikedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.HasKey("SourceUserId", "LikedUserId");

                    b.HasIndex("LikedUserId");

                    b.ToTable("UserLikes", "User");
                });

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.Connection", b =>
                {
                    b.HasOne("DotNetCoreAngular.Models.Entity.Group", null)
                        .WithMany("Connections")
                        .HasForeignKey("GroupName");
                });

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.Message", b =>
                {
                    b.HasOne("DotNetCoreAngular.Models.Entity.User", "Recipient")
                        .WithMany("MessagesReceived")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DotNetCoreAngular.Models.Entity.User", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.Photo", b =>
                {
                    b.HasOne("DotNetCoreAngular.Models.Entity.User", "User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.UserLike", b =>
                {
                    b.HasOne("DotNetCoreAngular.Models.Entity.User", "LikedUser")
                        .WithMany("LikedByUsers")
                        .HasForeignKey("LikedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DotNetCoreAngular.Models.Entity.User", "SourceUser")
                        .WithMany("LikedUsers")
                        .HasForeignKey("SourceUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LikedUser");

                    b.Navigation("SourceUser");
                });

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.Group", b =>
                {
                    b.Navigation("Connections");
                });

            modelBuilder.Entity("DotNetCoreAngular.Models.Entity.User", b =>
                {
                    b.Navigation("LikedByUsers");

                    b.Navigation("LikedUsers");

                    b.Navigation("MessagesReceived");

                    b.Navigation("MessagesSent");

                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
